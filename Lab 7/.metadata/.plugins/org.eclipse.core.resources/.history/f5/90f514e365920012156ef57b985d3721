package com.example.picviewer;

import android.app.Activity;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.IMG.*;
 
public class PicEditMain extends Activity implements SensorEventListener {
       // Private member of this class. Class is like a more powerful struct in C, you can have member variables
       // and member methods

       private IMG img; 
       private  SensorManager sensorManager;
       OnHeadlineSelectedListener mCallback;
       
       // The container Activity must implement this interface so the frag can deliver messages
       public interface OnHeadlineSelectedListener {
           /** Called by HeadlinesFragment when a list item is selected */
           public void onArticleSelected(int position);
       }
      
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_pic_edit_main);
        ImageView mImage = (ImageView) findViewById(R.id.imageView1);
        TextView mTextView = (TextView) findViewById(R.id.imgsize);
       img = new IMG(getResources(), mTextView, mImage); 
       
       sensorManager = (SensorManager)this.getSystemService(Context.SENSOR_SERVICE);
       sensorManager.registerListener(this, sensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION),
              SensorManager.SENSOR_DELAY_NORMAL);
       
       // This makes sure that the container activity has implemented
       // the callback interface. If not, it throws an exception.
       try {
           mCallback = (OnHeadlineSelectedListener) this.mCallback;
       } catch (ClassCastException e) {
           throw new ClassCastException(this.toString()
                   + " must implement OnHeadlineSelectedListener");
       }
       
    } 

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {
    // TODO Auto-generated method stub
 
    }
    
    private enum Direction {
    	LEFT, 
    	RIGHT, 
    	UP, 
    	DOWN, 
    	FORWARD, 
    	BACK, 
    	NONE
    }
    
    private int state; 
    
    private void changeState(Direction dir)
    {
    	switch (state)
    	{
    	case 1: // Initial
    		if(dir == Direction.LEFT) state = 2;
    		if(dir == Direction.RIGHT) state = 3; 
    		if(dir == Direction.BACK) state = 12;

    		break;
    	case 2: // Going left
    		if(dir == Direction.UP) state = 6; 
    		if(dir == Direction.LEFT) state = 2;
    		if(dir == Direction.RIGHT) state = 4;
    		if(dir == Direction.DOWN) state = 14; 
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 3: // Going right
    		if(dir == Direction.UP) state = 9; 
    		if(dir == Direction.LEFT) state = 5;
    		if(dir == Direction.RIGHT) state = 3;
    		if(dir == Direction.DOWN) state = 16;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 4: // Left Right
    		if(dir == Direction.UP) state = 1; 
    		if(dir == Direction.LEFT) state = 1;
    		if(dir == Direction.RIGHT) state = 1;
    		if(dir == Direction.DOWN) state = 1;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 5: // Right Left 
    		if(dir == Direction.UP) state = 1; 
    		if(dir == Direction.LEFT) state = 1;
    		if(dir == Direction.RIGHT) state = 1;
    		if(dir == Direction.DOWN) state = 1;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 6: // Clockwise Up
    		if(dir == Direction.UP) state = 6; 
    		if(dir == Direction.LEFT) state = 1;
    		if(dir == Direction.RIGHT) state = 7;
    		if(dir == Direction.DOWN) state = 1;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 7: // Clockwise across
    		if(dir == Direction.UP) state = 1; 
    		if(dir == Direction.LEFT) state = 1;
    		if(dir == Direction.RIGHT) state = 7;
    		if(dir == Direction.DOWN) state = 8;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 8: // Clockwise Complete
    		if(dir == Direction.UP) state = 1; 
    		if(dir == Direction.LEFT) state = 1;
    		if(dir == Direction.RIGHT) state = 1;
    		if(dir == Direction.DOWN) state = 1;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 9: // CCW Up
    		if(dir == Direction.UP) state = 9; 
    		if(dir == Direction.LEFT) state = 10;
    		if(dir == Direction.RIGHT) state = 1;
    		if(dir == Direction.DOWN) state = 1;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 10: // CCW across
    		if(dir == Direction.UP) state = 1; 
    		if(dir == Direction.LEFT) state = 10;
    		if(dir == Direction.RIGHT) state = 1;
    		if(dir == Direction.DOWN) state = 11;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 11: // CCW Complete
    		if(dir == Direction.UP) state = 1; 
    		if(dir == Direction.LEFT) state = 1;
    		if(dir == Direction.RIGHT) state = 1;
    		if(dir == Direction.DOWN) state = 1;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 12: // Back
    		if(dir == Direction.UP) state = 1; 
    		if(dir == Direction.LEFT) state = 1;
    		if(dir == Direction.RIGHT) state = 1;
    		if(dir == Direction.DOWN) state = 1;
    		if(dir == Direction.BACK) state = 12;
    		if(dir == Direction.FORWARD) state = 13;
    		break;
    	case 13: // Back Forward Complete
    		if(dir == Direction.UP) state = 1; 
    		if(dir == Direction.LEFT) state = 1;
    		if(dir == Direction.RIGHT) state = 1;
    		if(dir == Direction.DOWN) state = 1;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 14: // Left Down
    		if(dir == Direction.UP) state = 1; 
    		if(dir == Direction.LEFT) state = 1;
    		if(dir == Direction.RIGHT) state = 15;
    		if(dir == Direction.DOWN) state = 14;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 15: // CCW Across 2
    		if(dir == Direction.UP) state = 11; 
    		if(dir == Direction.LEFT) state = 1;
    		if(dir == Direction.RIGHT) state = 15;
    		if(dir == Direction.DOWN) state = 1;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 16: // Right Down
    		if(dir == Direction.UP) state = 1; 
    		if(dir == Direction.LEFT) state = 17;
    		if(dir == Direction.RIGHT) state = 1;
    		if(dir == Direction.DOWN) state = 16;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	case 17: // Goto 8
    		if(dir == Direction.UP) state = 8; 
    		if(dir == Direction.LEFT) state = 17;
    		if(dir == Direction.RIGHT) state = 1;
    		if(dir == Direction.DOWN) state = 1;
    		if(dir == Direction.BACK) state = 1;
    		if(dir == Direction.FORWARD) state = 1;
    		break;
    	default:
    		state = 1; 
			break; 
    	}
    }
    
    @Override
    public void onSensorChanged(SensorEvent event) {
    // TODO Auto-generated method stub
        // check sensor type
        final float aThreshold = 2;
        if(event.sensor.getType()==Sensor.TYPE_LINEAR_ACCELERATION){
 
             // assign directions
             float x=event.values[0];
             float y=event.values[1];
             float z=event.values[2];
             
             ((TextView) findViewById(R.id.txtX)).setText("X: "+ x);
             ((TextView) findViewById(R.id.txtY)).setText("Y: "+ y);
             ((TextView) findViewById(R.id.txtZ)).setText("Z: "+ z);
             
             if (Math.abs(x) < aThreshold && Math.abs(y) < aThreshold && Math.abs(z) < aThreshold) {
                     return;
             }
    
             Direction currentDir = Direction.NONE;
             
             double coneSize = 1.3; 
             
             if(Math.abs(x)/Math.abs(y) > coneSize && Math.abs(x)/Math.abs(z) > coneSize )
             {
            	if(x > 0)
            	{
            		currentDir = Direction.RIGHT; 
            	}
            	else
            	{
            		currentDir = Direction.LEFT; 
            	}
             }
             
             if(Math.abs(y)/Math.abs(x) > coneSize && Math.abs(y)/Math.abs(z) > coneSize )
             {
            	 if(x > 0)
             	{
             		currentDir = Direction.UP; 
             	}
             	else
             	{
             		currentDir = Direction.DOWN; 
             	}
             }
             
             if(Math.abs(z)/Math.abs(x) > coneSize && Math.abs(z)/Math.abs(y) > coneSize )
             {
            	 if(x > 0)
             	{
             		currentDir = Direction.FORWARD; 
             	}
             	else
             	{
             		currentDir = Direction.BACK; 
             	}
             }
             changeState(currentDir);
             
             ImageView mImage = (ImageView) findViewById(R.id.imageView1);
             
             switch (state)
             {
             case 4: 
            	 img.Change(mImage, 2); 
            	 break; 
             case 5: 
            	 img.Change(); 
            	 break; 
             case 8: 
            	 img.Change(); 
            	 break; 
             case 11: 
            	 img.Change(); 
            	 break; 
             case 13: 
            	 img.Change(); 
            	 break; 
             }
             
             ((TextView) findViewById(R.id.mainBox)).setText("Direction: "+ currentDir + " State: " + state);
        }
 
    }
}
